# -*- coding: utf-8 -*-
"""
Simple examples demonstrating the use of GLMeshItem.

"""

## Add path to library (just for examples; you do not need this)
#import initExample

from pyqtgraph.Qt import QtCore, QtGui
import pyqtgraph as pg
import pyqtgraph.opengl as gl

app = QtGui.QApplication([])
w = gl.GLViewWidget()
w.show()
w.setWindowTitle('pyqtgraph example: GLMeshItem')
w.setCameraPosition(distance=40)

g = gl.GLGridItem()
#g.scale(2, 2, 1)
g.scale(50, 50, 25)
w.addItem(g)

import numpy as np

## Example 1:
## Array of vertex positions and array of vertex indexes defining faces
## Colors are specified per-face

verts = np.array([
    [0, 0, 0],
    [2, 0, 0],
    [1, 2, 0],
    [1, 1, 1],
])
faces = np.array([
    [0, 1, 2],
    [0, 1, 3],
    [0, 2, 3],
    [1, 2, 3]
])
colors = np.array([
    [1, 0, 0, 0.3],
    [0, 1, 0, 0.3],
    [0, 0, 1, 0.3],
    [1, 1, 0, 0.3]
])

## Mesh item will automatically compute face normals.

'''
points = np.array([[-5.0, 215.0], [-4.0, 215.0], [-4.0, 214.0], [-3.0, 213.0], [-2.0, 212.0], [-1.0, 211.0], [0.0, 210.0], [0.0, 209.0], [2.0, 208.0], [3.0, 207.0], [4.0, 206.0], [5.0, 205.0], [6.0, 204.0], [7.0, 203.0], [8.0, 202.0], [8.0, 201.0], [9.0, 201.0], [9.0, 200.0], [10.0, 200.0], [10.0, 199.0], [11.0, 199.0], [12.0, 199.0], [12.0, 198.0], [13.0, 197.0], [14.0, 197.0], [14.0, 196.0], [15.0, 196.0], [16.0, 196.0], [16.0, 195.0], [17.0, 195.0], [18.0, 195.0], [18.0, 194.0], [19.0, 194.0], [19.0, 193.0], [20.0, 193.0], [21.0, 192.0], [22.0, 192.0], [23.0, 192.0], [23.0, 191.0], [24.0, 191.0], [25.0, 191.0], [26.0, 191.0], [26.0, 190.0], [27.0, 189.0], [28.0, 189.0], [29.0, 189.0], [30.0, 188.0], [31.0, 188.0], [32.0, 188.0], [33.0, 188.0], [33.0, 187.0], [34.0, 187.0], [35.0, 187.0], [36.0, 187.0], [37.0, 186.0], [38.0, 185.0], [39.0, 185.0], [39.0, 184.0], [40.0, 184.0], [41.0, 183.0], [42.0, 182.0], [42.0, 181.0], [43.0, 181.0], [43.0, 180.0], [44.0, 180.0], [45.0, 179.0], [46.0, 179.0], [46.0, 178.0], [47.0, 178.0], [48.0, 177.0], [49.0, 177.0], [49.0, 176.0], [50.0, 176.0], [51.0, 176.0], [51.0, 175.0], [52.0, 175.0], [53.0, 175.0], [54.0, 174.0], [55.0, 174.0], [55.0, 173.0], [56.0, 173.0], [56.0, 172.0], [57.0, 172.0], [58.0, 172.0], [58.0, 171.0], [59.0, 171.0], [60.0, 171.0], [60.0, 170.0], [61.0, 170.0], [62.0, 170.0], [63.0, 170.0], [64.0, 170.0], [65.0, 170.0], [66.0, 170.0], [67.0, 170.0], [68.0, 170.0], [69.0, 170.0], [70.0, 171.0], [71.0, 171.0], [71.0, 172.0], [72.0, 172.0], [73.0, 173.0], [74.0, 173.0], [75.0, 174.0], [75.0, 175.0], [76.0, 175.0], [77.0, 177.0], [78.0, 177.0], [79.0, 178.0], [79.0, 179.0], [80.0, 179.0], [81.0, 180.0], [81.0, 181.0], [82.0, 181.0], [82.0, 182.0], [83.0, 182.0], [83.0, 183.0], [83.0, 184.0], [84.0, 185.0], [84.0, 186.0], [84.0, 187.0], [85.0, 188.0], [85.0, 189.0], [85.0, 190.0], [85.0, 191.0], [85.0, 192.0], [85.0, 193.0], [85.0, 194.0], [85.0, 195.0], [85.0, 196.0], [84.0, 197.0], [83.0, 198.0], [83.0, 199.0], [83.0, 200.0], [82.0, 201.0], [81.0, 202.0], [80.0, 202.0], [80.0, 203.0], [80.0, 204.0], [79.0, 205.0], [78.0, 206.0], [77.0, 207.0], [77.0, 208.0], [76.0, 208.0], [76.0, 209.0], [76.0, 210.0], [75.0, 211.0], [75.0, 212.0], [74.0, 212.0], [73.0, 213.0], [72.0, 214.0], [72.0, 215.0], [71.0, 215.0], [71.0, 216.0], [70.0, 216.0], [69.0, 217.0], [68.0, 218.0], [67.0, 219.0], [66.0, 220.0], [65.0, 221.0], [64.0, 222.0], [62.0, 223.0], [61.0, 224.0], [60.0, 224.0], [59.0, 225.0], [58.0, 226.0], [57.0, 227.0], [56.0, 228.0], [55.0, 228.0], [54.0, 230.0], [53.0, 230.0], [52.0, 231.0], [51.0, 233.0], [50.0, 233.0], [49.0, 233.0], [49.0, 234.0], [48.0, 234.0], [48.0, 235.0], [47.0, 235.0], [46.0, 235.0], [45.0, 236.0], [45.0, 237.0], [44.0, 237.0], [43.0, 237.0], [42.0, 238.0], [41.0, 239.0], [40.0, 239.0], [39.0, 240.0], [39.0, 241.0], [38.0, 241.0], [37.0, 241.0], [37.0, 242.0], [36.0, 242.0], [35.0, 242.0], [35.0, 243.0], [34.0, 243.0], [33.0, 244.0], [32.0, 244.0], [32.0, 245.0], [31.0, 245.0], [30.0, 245.0], [30.0, 246.0], [29.0, 246.0], [28.0, 246.0], [28.0, 247.0], [28.0, 248.0], [27.0, 248.0], [27.0, 249.0], [26.0, 249.0], [26.0, 250.0], [26.0, 251.0], [26.0, 252.0], [26.0, 253.0], [26.0, 254.0], [26.0, 255.0], [26.0, 256.0], [26.0, 257.0], [26.0, 258.0], [26.0, 259.0], [26.0, 260.0], [26.0, 261.0], [26.0, 262.0], [26.0, 263.0], [25.0, 263.0], [25.0, 264.0], [25.0, 265.0], [25.0, 266.0], [24.0, 266.0], [24.0, 267.0], [23.0, 267.0], [22.0, 268.0], [21.0, 269.0], [21.0, 270.0], [20.0, 270.0], [20.0, 271.0], [19.0, 271.0], [18.0, 271.0], [18.0, 272.0], [17.0, 272.0], [17.0, 273.0], [16.0, 273.0], [16.0, 274.0], [15.0, 274.0], [14.0, 275.0], [13.0, 276.0], [12.0, 277.0], [12.0, 278.0], [11.0, 278.0], [10.0, 279.0], [9.0, 279.0], [8.0, 280.0], [7.0, 281.0], [6.0, 282.0], [5.0, 283.0], [4.0, 283.0], [4.0, 284.0], [3.0, 284.0], [2.0, 285.0], [1.0, 286.0], [0.0, 287.0], [-2.0, 287.0], [-2.0, 288.0], [-3.0, 288.0], [-3.0, 289.0], [-4.0, 289.0], [-5.0, 290.0], [-6.0, 290.0], [-7.0, 291.0], [-8.0, 291.0], [-9.0, 292.0], [-10.0, 293.0], [-12.0, 293.0], [-12.0, 294.0], [-13.0, 294.0], [-14.0, 294.0], [-15.0, 294.0], [-15.0, 295.0], [-16.0, 296.0], [-17.0, 296.0], [-18.0, 296.0], [-19.0, 296.0], [-21.0, 297.0], [-22.0, 297.0], [-23.0, 298.0], [-24.0, 298.0], [-25.0, 299.0], [-26.0, 299.0], [-27.0, 299.0], [-27.0, 300.0], [-28.0, 300.0], [-29.0, 300.0], [-30.0, 301.0], [-31.0, 301.0], [-32.0, 301.0], [-33.0, 302.0], [-35.0, 302.0], [-35.0, 303.0], [-36.0, 303.0], [-37.0, 303.0], [-38.0, 303.0], [-39.0, 303.0], [-40.0, 303.0], [-41.0, 303.0], [-42.0, 303.0], [-43.0, 303.0], [-44.0, 303.0], [-45.0, 303.0], [-46.0, 303.0], [-47.0, 303.0], [-47.0, 302.0], [-48.0, 302.0], [-49.0, 302.0], [-49.0, 301.0], [-50.0, 301.0], [-50.0, 300.0], [-51.0, 300.0], [-51.0, 298.0], [-52.0, 298.0], [-53.0, 297.0], [-54.0, 296.0], [-54.0, 295.0], [-56.0, 294.0], [-57.0, 293.0], [-57.0, 292.0], [-58.0, 292.0], [-58.0, 291.0], [-59.0, 291.0], [-60.0, 290.0], [-61.0, 289.0], [-62.0, 288.0], [-62.0, 287.0], [-63.0, 287.0], [-63.0, 286.0], [-64.0, 286.0], [-64.0, 284.0], [-64.0, 283.0], [-64.0, 282.0], [-64.0, 281.0], [-64.0, 280.0], [-64.0, 279.0], [-64.0, 278.0], [-64.0, 277.0], [-64.0, 276.0], [-64.0, 275.0], [-64.0, 274.0], [-64.0, 273.0], [-64.0, 272.0], [-64.0, 271.0], [-64.0, 270.0], [-63.0, 269.0], [-63.0, 268.0], [-63.0, 267.0], [-62.0, 266.0], [-61.0, 266.0], [-61.0, 265.0], [-60.0, 264.0], [-60.0, 263.0], [-59.0, 261.0], [-58.0, 260.0], [-57.0, 258.0], [-56.0, 257.0], [-56.0, 256.0], [-55.0, 256.0], [-54.0, 256.0], [-54.0, 254.0], [-53.0, 254.0], [-52.0, 253.0], [-51.0, 253.0], [-50.0, 252.0], [-49.0, 251.0], [-49.0, 250.0], [-49.0, 249.0], [-48.0, 249.0], [-48.0, 248.0], [-48.0, 247.0], [-47.0, 247.0], [-47.0, 246.0], [-47.0, 245.0], [-47.0, 244.0], [-46.0, 244.0], [-46.0, 243.0], [-46.0, 242.0], [-46.0, 241.0], [-46.0, 240.0], [-46.0, 238.0], [-46.0, 237.0], [-46.0, 236.0], [-46.0, 235.0], [-46.0, 234.0], [-46.0, 233.0], [-46.0, 232.0], [-46.0, 231.0], [-46.0, 230.0], [-46.0, 229.0], [-47.0, 228.0], [-47.0, 227.0], [-47.0, 226.0], [-47.0, 224.0], [-48.0, 223.0], [-48.0, 222.0], [-48.0, 221.0], [-49.0, 219.0], [-50.0, 217.0], [-50.0, 216.0], [-50.0, 215.0], [-50.0, 214.0], [-51.0, 213.0], [-51.0, 211.0], [-52.0, 209.0], [-53.0, 208.0], [-53.0, 207.0], [-53.0, 206.0], [-54.0, 205.0], [-54.0, 204.0], [-55.0, 203.0], [-56.0, 202.0], [-56.0, 200.0], [-57.0, 200.0], [-57.0, 199.0], [-57.0, 198.0], [-58.0, 197.0], [-59.0, 196.0], [-59.0, 195.0], [-60.0, 195.0], [-60.0, 193.0], [-60.0, 192.0], [-61.0, 192.0], [-61.0, 191.0], [-61.0, 190.0], [-61.0, 189.0], [-62.0, 189.0], [-62.0, 188.0], [-63.0, 188.0], [-63.0, 187.0], [-63.0, 186.0], [-63.0, 185.0], [-63.0, 184.0], [-63.0, 183.0], [-62.0, 183.0], [-61.0, 183.0], [-60.0, 183.0], [-59.0, 183.0], [-58.0, 183.0], [-57.0, 183.0], [-56.0, 183.0], [-55.0, 183.0], [-54.0, 183.0], [-54.0, 184.0], [-53.0, 184.0], [-52.0, 185.0], [-52.0, 186.0], [-51.0, 186.0], [-50.0, 186.0], [-50.0, 187.0], [-49.0, 187.0], [-49.0, 188.0], [-48.0, 188.0], [-48.0, 189.0], [-48.0, 190.0], [-47.0, 190.0], [-47.0, 191.0], [-46.0, 191.0], [-46.0, 192.0], [-45.0, 192.0], [-45.0, 193.0], [-44.0, 194.0], [-43.0, 194.0], [-43.0, 195.0], [-42.0, 196.0], [-41.0, 196.0], [-40.0, 197.0], [-40.0, 198.0], [-39.0, 198.0], [-39.0, 199.0], [-38.0, 199.0], [-37.0, 199.0], [-37.0, 200.0], [-36.0, 200.0], [-35.0, 201.0], [-35.0, 202.0], [-34.0, 202.0], [-33.0, 202.0], [-33.0, 203.0], [-32.0, 203.0], [-32.0, 204.0], [-31.0, 204.0], [-30.0, 204.0], [-30.0, 205.0], [-29.0, 205.0], [-28.0, 205.0], [-28.0, 206.0], [-27.0, 206.0], [-26.0, 206.0], [-25.0, 207.0], [-24.0, 207.0], [-23.0, 207.0], [-22.0, 208.0], [-21.0, 208.0], [-20.0, 209.0], [-19.0, 209.0], [-19.0, 210.0], [-18.0, 210.0], [-17.0, 210.0], [-16.0, 211.0], [-15.0, 211.0], [-14.0, 211.0], [-14.0, 212.0], [-13.0, 212.0], [-12.0, 212.0], [-11.0, 212.0], [-11.0, 213.0], [-10.0, 213.0], [-9.0, 213.0], [-8.0, 213.0], [-7.0, 213.0]])
p1 = np.subtract(points, [-350, -70])
p2 = p1

p1 = np.hstack((p1, np.zeros((len(p1),1)))) #añadir eje z 0
p2 = np.hstack((p2, np.ones((len(p2),1)))) #añadir eje z 1

fac1 = np.arange(len(p1))
fac2 = np.arange(len(p2))

m = gl.GLMeshItem(vertexes=p1, faces=np.array([fac1]))#, faceColors=colors, smooth=False)
w.addItem(m)
me = gl.GLMeshItem(vertexes=p2, faces=np.array([fac2]))#, faceColors=colors, smooth=False)
w.addItem(me)
'''

m1 = gl.GLMeshItem(vertexes=verts, faces=faces, faceColors=colors, smooth=False)
#m1.translate(5, 5, 0)
#m1.setGLOptions('additive')
w.addItem(m1)

## Example 2:
## Array of vertex positions, three per face
verts = np.empty((36, 3, 3), dtype=np.float32)
theta = np.linspace(0, 2 * np.pi, 37)[:-1]
verts[:, 0] = np.vstack([2 * np.cos(theta), 2 * np.sin(theta), [0] * 36]).T
verts[:, 1] = np.vstack([4 * np.cos(theta + 0.2), 4 * np.sin(theta + 0.2), [-1] * 36]).T
verts[:, 2] = np.vstack([4 * np.cos(theta - 0.2), 4 * np.sin(theta - 0.2), [1] * 36]).T

## Colors are specified per-vertex
colors = np.random.random(size=(verts.shape[0], 3, 4))
m2 = gl.GLMeshItem(vertexes=verts, vertexColors=colors, smooth=False, shader='balloon',
                   drawEdges=True, edgeColor=(1, 1, 0, 1))
m2.translate(-5, 5, 0)
#w.addItem(m2)

## Example 3:
## sphere

md = gl.MeshData.sphere(rows=10, cols=20)
# colors = np.random.random(size=(md.faceCount(), 4))
# colors[:,3] = 0.3
# colors[100:] = 0.0
colors = np.ones((md.faceCount(), 4), dtype=float)
colors[::2, 0] = 0
colors[:, 1] = np.linspace(0, 1, colors.shape[0])
md.setFaceColors(colors)
m3 = gl.GLMeshItem(meshdata=md, smooth=False)  # , shader='balloon')

m3.translate(5, -5, 0)
#w.addItem(m3)

# Example 4:
# wireframe

md = gl.MeshData.sphere(rows=4, cols=8)
m4 = gl.GLMeshItem(meshdata=md, smooth=False, drawFaces=False, drawEdges=True, edgeColor=(1, 1, 1, 1))
m4.translate(0, 10, 0)
#w.addItem(m4)

# Example 5:
# cylinder
md = gl.MeshData.cylinder(rows=10, cols=20, radius=[1., 2.0], length=5.)
md2 = gl.MeshData.cylinder(rows=10, cols=20, radius=[2., 0.5], length=10.)
colors = np.ones((md.faceCount(), 4), dtype=float)
colors[::2, 0] = 0
colors[:, 1] = np.linspace(0, 1, colors.shape[0])
md.setFaceColors(colors)
m5 = gl.GLMeshItem(meshdata=md, smooth=True, drawEdges=True, edgeColor=(1, 0, 0, 1), shader='balloon')
colors = np.ones((md.faceCount(), 4), dtype=float)
colors[::2, 0] = 0
colors[:, 1] = np.linspace(0, 1, colors.shape[0])
md2.setFaceColors(colors)
m6 = gl.GLMeshItem(meshdata=md2, smooth=True, drawEdges=False, shader='balloon')
m6.translate(0, 0, 7.5)

m6.rotate(0., 0, 1, 1)
# m5.translate(-3,3,0)
#w.addItem(m5)
#w.addItem(m6)

## Start Qt event loop unless running in interactive mode.

if __name__ == '__main__':
    import sys

    if (sys.flags.interactive != 1) or not hasattr(QtCore, 'PYQT_VERSION'):
        QtGui.QApplication.instance().exec_()


